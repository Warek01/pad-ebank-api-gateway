# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import app.generated.account_service_pb2 as account__service__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in account_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AccountServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/account_service.AccountService/Login',
                request_serializer=account__service__pb2.LoginCredentials.SerializeToString,
                response_deserializer=account__service__pb2.AuthResult.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/account_service.AccountService/Register',
                request_serializer=account__service__pb2.RegisterCredentials.SerializeToString,
                response_deserializer=account__service__pb2.AuthResult.FromString,
                _registered_method=True)
        self.GetProfile = channel.unary_unary(
                '/account_service.AccountService/GetProfile',
                request_serializer=account__service__pb2.GetProfileOptions.SerializeToString,
                response_deserializer=account__service__pb2.GetProfileResult.FromString,
                _registered_method=True)
        self.AddCurrency = channel.unary_unary(
                '/account_service.AccountService/AddCurrency',
                request_serializer=account__service__pb2.AddCurrencyOptions.SerializeToString,
                response_deserializer=account__service__pb2.AddCurrencyResult.FromString,
                _registered_method=True)
        self.CanPerformTransaction = channel.unary_unary(
                '/account_service.AccountService/CanPerformTransaction',
                request_serializer=account__service__pb2.TransactionData.SerializeToString,
                response_deserializer=account__service__pb2.CanPerformTransactionResult.FromString,
                _registered_method=True)
        self.ChangeCurrency = channel.unary_unary(
                '/account_service.AccountService/ChangeCurrency',
                request_serializer=account__service__pb2.ChangeCurrencyOptions.SerializeToString,
                response_deserializer=account__service__pb2.ChangeCurrencyResult.FromString,
                _registered_method=True)
        self.BlockCard = channel.unary_unary(
                '/account_service.AccountService/BlockCard',
                request_serializer=account__service__pb2.CardIdentifier.SerializeToString,
                response_deserializer=account__service__pb2.BlockCardResult.FromString,
                _registered_method=True)
        self.UnblockCard = channel.unary_unary(
                '/account_service.AccountService/UnblockCard',
                request_serializer=account__service__pb2.CardIdentifier.SerializeToString,
                response_deserializer=account__service__pb2.UnblockCardResult.FromString,
                _registered_method=True)


class AccountServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProfile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCurrency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CanPerformTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeCurrency(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockCard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnblockCard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=account__service__pb2.LoginCredentials.FromString,
                    response_serializer=account__service__pb2.AuthResult.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=account__service__pb2.RegisterCredentials.FromString,
                    response_serializer=account__service__pb2.AuthResult.SerializeToString,
            ),
            'GetProfile': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProfile,
                    request_deserializer=account__service__pb2.GetProfileOptions.FromString,
                    response_serializer=account__service__pb2.GetProfileResult.SerializeToString,
            ),
            'AddCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCurrency,
                    request_deserializer=account__service__pb2.AddCurrencyOptions.FromString,
                    response_serializer=account__service__pb2.AddCurrencyResult.SerializeToString,
            ),
            'CanPerformTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.CanPerformTransaction,
                    request_deserializer=account__service__pb2.TransactionData.FromString,
                    response_serializer=account__service__pb2.CanPerformTransactionResult.SerializeToString,
            ),
            'ChangeCurrency': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeCurrency,
                    request_deserializer=account__service__pb2.ChangeCurrencyOptions.FromString,
                    response_serializer=account__service__pb2.ChangeCurrencyResult.SerializeToString,
            ),
            'BlockCard': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockCard,
                    request_deserializer=account__service__pb2.CardIdentifier.FromString,
                    response_serializer=account__service__pb2.BlockCardResult.SerializeToString,
            ),
            'UnblockCard': grpc.unary_unary_rpc_method_handler(
                    servicer.UnblockCard,
                    request_deserializer=account__service__pb2.CardIdentifier.FromString,
                    response_serializer=account__service__pb2.UnblockCardResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'account_service.AccountService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('account_service.AccountService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AccountService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/Login',
            account__service__pb2.LoginCredentials.SerializeToString,
            account__service__pb2.AuthResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/Register',
            account__service__pb2.RegisterCredentials.SerializeToString,
            account__service__pb2.AuthResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProfile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/GetProfile',
            account__service__pb2.GetProfileOptions.SerializeToString,
            account__service__pb2.GetProfileResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/AddCurrency',
            account__service__pb2.AddCurrencyOptions.SerializeToString,
            account__service__pb2.AddCurrencyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CanPerformTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/CanPerformTransaction',
            account__service__pb2.TransactionData.SerializeToString,
            account__service__pb2.CanPerformTransactionResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeCurrency(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/ChangeCurrency',
            account__service__pb2.ChangeCurrencyOptions.SerializeToString,
            account__service__pb2.ChangeCurrencyResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BlockCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/BlockCard',
            account__service__pb2.CardIdentifier.SerializeToString,
            account__service__pb2.BlockCardResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnblockCard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/account_service.AccountService/UnblockCard',
            account__service__pb2.CardIdentifier.SerializeToString,
            account__service__pb2.UnblockCardResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
